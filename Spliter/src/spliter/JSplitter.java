package spliter;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Invenio
 */
public class JSplitter extends javax.swing.JFrame {

    /**
     * Creates new form JSplitter
     */
    public JSplitter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtOutput = new javax.swing.JTextArea();
        btnSplit = new javax.swing.JButton();
        cbArabic = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtChars = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnPaste = new javax.swing.JButton();
        cbUnicode = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtInput.setColumns(20);
        txtInput.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        txtInput.setLineWrap(true);
        txtInput.setRows(5);
        jScrollPane1.setViewportView(txtInput);

        TxtOutput.setEditable(false);
        TxtOutput.setColumns(20);
        TxtOutput.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        TxtOutput.setRows(5);
        jScrollPane2.setViewportView(TxtOutput);

        btnSplit.setText("Split");
        btnSplit.setToolTipText("");
        btnSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSplitActionPerformed(evt);
            }
        });

        cbArabic.setText("Arabic");
        cbArabic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbArabicActionPerformed(evt);
            }
        });

        jLabel1.setText("Input Text");

        jLabel2.setText("Output Text split fixed length=");

        txtChars.setText("72");

        jLabel3.setText("Output Text");

        btnPaste.setText("Paste");
        btnPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteActionPerformed(evt);
            }
        });

        cbUnicode.setText("Use UNICODE RTL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(cbArabic)
                                .addGap(18, 18, 18)
                                .addComponent(cbUnicode)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtChars, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(btnSplit)
                                .addGap(8, 8, 8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPaste)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnPaste))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSplit)
                            .addComponent(jLabel2)
                            .addComponent(txtChars, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbArabic)
                            .addComponent(cbUnicode))
                        .addGap(32, 32, 32))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbArabicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbArabicActionPerformed
        cbUnicode.setEnabled(cbArabic.isSelected());
    }//GEN-LAST:event_cbArabicActionPerformed

    @SuppressWarnings("empty-statement")
    private void btnSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSplitActionPerformed
        String out = "";
        String endl = "\r\n";
        String splitters = " ";
        int cb = 0;
        int pcb = -1;
        String s = this.txtInput.getText();
        boolean ar = cbArabic.isSelected();
        String chunk = "";

        int chars = Integer.parseInt(txtChars.getText());
        cb = chars;
        while (cb < s.length()) {
            char c = s.charAt(cb);
            if (splitters.indexOf(cb) >= 0) {
                out += s.substring(pcb + 1, cb) + endl;
            } else {
                while (--cb > pcb && splitters.indexOf(s.charAt(cb)) < 0);
                chunk = s.substring(pcb + 1, cb);
                if (ar) {
                    chunk = rev(chunk);
                }
                out += chunk + endl;
            }
            pcb = cb;
            cb += chars;
            TxtOutput.setText(out);
        }
        if (cb > s.length()) {
            chunk = s.substring(pcb + 1);
            if (ar) {
                chunk = rev(chunk);
            }
            out += chunk + endl;
        }
        TxtOutput.setText(out);

    }//GEN-LAST:event_btnSplitActionPerformed

    private String rev(String s) {
        //https://www.w3.org/International/questions/qa-bidi-unicode-controls
        String arb = "" + (char) 0x202B;
        String eng = "" + (char) 0x202C;
        String arbx = "" + (char) 0x200F;
        String engx = "" + (char) 0x200E;
        int method = 0;
        String rs = "";
        String tmp = "";
        Stack<String> st = new Stack<String>();
        st.clear();
        int state = 0;
        int pstate = 0;
        boolean push = false;
        char ca[] = s.toCharArray();
        char c = 0;
        boolean stop = false;
        if (cbUnicode.isSelected())
            method = 1;
        else
            method = 0;
        
        for (int i = 0; i < ca.length; i++) {
            if (isNum(ca[i])) {
                state = 1;
            } else if (isSpace(ca[i])) {
                state = 2;
            } else {
                state = 0;
            }

            if (state != pstate) {
                if (method == 1) {
                    rs += tmp;
                } else {
                    if (pstate == 0) {
                        rs += tmp;
                    }
                    if (pstate == 1 || pstate == 2) {
                        st.push(tmp);
                    }
                    if (state == 0 && (pstate == 1 || pstate == 2)) {
                        while (!st.isEmpty()) {
                            rs += st.pop();
                        }
                    }
                }

                pstate = state;
                tmp = "";
                if (method == 1) {
                    if (pstate == 0) {
                        tmp += arbx;
                    } else if (pstate == 1) {
                        tmp += engx;
                    }

                    if (state == 0) {
                        tmp += arb;
                    } else if (state == 1) {
                        tmp += eng;
                    }
                }

            }

            tmp += ca[i];

        }
        if (tmp.length() > 0) {
            rs += tmp;
        }
        if (method==0)
            while (!st.isEmpty()) rs+=st.pop();

        return rs;
    }

    private boolean isNum(char c) {
        String nums = "1234567890";
        if (nums.indexOf(c) >= 0) {
            return true;
        }
        return false;
    }

    private boolean isSpace(char c) {
        String spaces = " -%/";
        if (spaces.indexOf(c) >= 0) {
            return true;
        }
        return false;
    }

    private boolean isArb(char c) {
        if (c >= 0x0600 && c <= 0x06E0) {
            return true;
        }
        return false;
    }

    private boolean isEng(char c) {
        String eng = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        if (eng.indexOf(c) >= 0) {
            return true;
        }
        return false;
    }

    private int isWhat(char c) {
        /*
       String nums = "1234567890";
     //  String Context = "., <>()[]{}\\/+-_*&^%$#@!";
       String eng = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      // if (Context.indexOf(c)>=0) return 2;
       
        if (c >= 0x0600 && c <= 0x06E0)
            return 1;
        if (eng.indexOf(c)>=0 || nums.indexOf(c)>=0) return 0;
        
        return 1;
        
         */
        String nums = "1234567890";
        String Context = " ./-+";
        if (nums.indexOf(c) >= 0) {
            return 0;
        }
        if (nums.indexOf(c) >= 0) {
            return 2;
        }
        return 1;

    }

    private void btnPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteActionPerformed
        try {
            String data = (String) Toolkit.getDefaultToolkit()
                    .getSystemClipboard().getData(DataFlavor.stringFlavor);
            txtInput.setText(data);
        } catch (UnsupportedFlavorException ex) {
            Logger.getLogger(JSplitter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JSplitter.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPasteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JSplitter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JSplitter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JSplitter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JSplitter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JSplitter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TxtOutput;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton btnSplit;
    private javax.swing.JCheckBox cbArabic;
    private javax.swing.JCheckBox cbUnicode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtChars;
    private javax.swing.JTextArea txtInput;
    // End of variables declaration//GEN-END:variables
}
